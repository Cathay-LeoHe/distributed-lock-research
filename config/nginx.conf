# Nginx configuration for Distributed Lock Research Application
# Provides load balancing, health checks, and failover

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Worker connections and file limits
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    # Custom log format for load balancing
    log_format upstream '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'upstream_addr=$upstream_addr '
                       'upstream_status=$upstream_status '
                       'upstream_response_time=$upstream_response_time '
                       'request_time=$request_time';
    
    access_log /var/log/nginx/access.log upstream;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=1r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Upstream configuration for application instances
    upstream distributed_lock_backend {
        # Load balancing method: least_conn for better distribution
        least_conn;
        
        # Application instances
        server app1:8080 max_fails=3 fail_timeout=30s weight=1;
        server app2:8080 max_fails=3 fail_timeout=30s weight=1;
        server app3:8080 max_fails=3 fail_timeout=30s weight=1;
        
        # Keep alive connections to upstream
        keepalive 32;
    }
    
    # Upstream for health checks (all instances)
    upstream health_check_backend {
        server app1:8080;
        server app2:8080;
        server app3:8080;
    }
    
    # Main server configuration
    server {
        listen 80;
        server_name localhost;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Connection and rate limiting
        limit_conn conn_limit_per_ip 20;
        
        # Health check endpoint for load balancer itself
        location /health {
            access_log off;
            limit_req zone=health burst=5 nodelay;
            
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Application health check endpoint
        location /actuator/health {
            limit_req zone=health burst=10 nodelay;
            
            proxy_pass http://health_check_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check specific settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }
        
        # API endpoints with rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://distributed_lock_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Proxy settings
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Upstream failover
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # Keep alive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # Actuator endpoints (monitoring)
        location /actuator/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://distributed_lock_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Monitoring specific settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            
            # Keep alive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # Root path redirect to API documentation or health
        location = / {
            return 302 /actuator/health;
        }
        
        # Static content (if any)
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 1d;
            add_header Cache-Control "public, immutable";
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # Include additional configurations
    include /etc/nginx/conf.d/*.conf;
}